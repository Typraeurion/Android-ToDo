\input texinfo   @c -*-texinfo-*-
@setfilename Building_ToDo.info
@settitle Building the To Do application for Android

@smallbook
@setchapternewpage on

@titlepage
@title Building the To Do application
@subtitle for Android
@author Trevin Beattie

@page
Copyleft @copyright{} 2011–-2025 Trevin Beattie

To Do for Android is distributed under the terms of the Gnu Public
License, version 3.0.

@quotation [Encryption code]
Copyright © 2000-2013 The Legion of the Bouncy Castle
Inc. (@uref{http://www.bouncycastle.org})

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the
``Software''), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ``AS IS'', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
@end quotation

Some of the images used by the program are reproduced from work created
and shared by the Android Open Source Project and used according to the
terms described in the Creative Commons 2.5 Attribution License.

This manual and other images used by the program were created by Trevin
Beattie and are shared according to the terms described in the Creative
Commons 3.0 Attribution-ShareAlike License.
@end titlepage

@contents

@ifnottex
@node Top, Code Organization, (dir), (dir)
@top Menu
@menu
* Code Organization::
* Building from the Source::
* To Do::
@end menu
@end ifnottex

@node Code Organization, Building from the Source, , Top
@chapter Code Organization

As with all Android projects, the @file{AndroidManifest.xml} file
under @file{app/src/main/} describes the main components of the
application --- its activities, provider, services, and intent
receiver.

There are two major packages for the code in
@file{app/src/main/java/}: the cryptography code and the main
application.  All code is under the top-level package
@code{com.xmission.trevin.android}, with the cryptography code in the
@code{crypto} subpackage and the rest of the application in
@code{todo}.

Resources used by the application (UI layout, language-dependent
strings, icons, etc.) are under @file{app/src/main/res/}.
@xref{Generating Icons} for details on how the icons are rendered.

@ifnottex
@menu
* Encryption Code::
* Data Model::
* User Interface::
* Services::
* Receiver::
* Provider::
* Utilities::
* Unit Tests::
* Android Tests::
@end menu
@end ifnottex

@node Encryption Code, Data Model, Code Organization, Code Organization
@section Encryption Code

When the user sets a password for private To Do items, the application
turns the password into an encryption key using a Password-Based Key
Derivation Function
(@url{https://en.wikipedia.org/wiki/PBKDF2,PBKDF}).  Android 4.4
(KitKat) introduced a @strong{breaking change} to the SecretKeyFactory
resulting in a different key being generated for the same password
compared to the key generated in Android 4.3 (Jellybean) and earlier
(see
``@url{https://android-developers.googleblog.com/2013/12/changes-to-secretkeyfactory-api-in.html,Changes to the SecretKeyFactory API in Android 4.4}'').
In addition, Android 2.2 (Froyo) had no support for the
@code{PBKDF2WithHmacSHA1} algorithm.  To allow the password to work
for both local data and backup files across all supported Android
versions, the app uses a copy of parts of BouncyCastle's encryption
library.  This code @strong{must} remain unchanged in all versions of
the To Do app.

@node Data Model, User Interface, Encryption Code, Code Organization
@section Data Model

@ifnothtml
@emph{To Do @dots}
@end ifnothtml
@ifhtml
@html
<i>To Do &#x2026;</i>
@end html
@end ifhtml

@node User Interface, Services, Data Model, Code Organization
@section User Interface

The Android Activities and other UI-related classes are in the
@code{ui} subpackage.  These include:

@itemize @bullet
@item @code{ToDoListActivity}
--- the main entry point of the application, which shows the list of
To Do items.

@item @code{ToDoDetailsActivity}
--- The screen which shows the general details of a single item from
the list.

@item @code{ToDoNoteActivity}
--- The screen that lets you add a longer note to a To Do item.

@item @code{CalendarDatePicker}
--- A custom calendar-like view for selecting a due date.

@item @code{CalendarDatePickerDialog}
--- A dialog wrapper around @code{Calendar@/Date@/Picker}

@item @code{RepeatEditor}
--- The screen that lets you customize when a repeating task needs to
be done again once it has been marked complete.

@item @code{RepeatDialog}
--- A dialog wrapper around @code{RepeatEditor}

@item @code{CategoryListActivity}
--- The screen that lets you edit categories for grouping items.

@item @code{PreferencesActivity}
--- The ``Settings'' screen of the application.

@item @code{ExportActivity}
--- The screen from which you can save the app's data to a backup file.

@item @code{ImportActivity}
--- The screen from which you can load app date from a backup file.
@end itemize

@node Services, Receiver, User Interface, Code Organization
@section Services

Background services are in the @code{service} subpackage.  These are:

@itemize @bullet
@item @code{AlarmService}
--- Keeps track of which To Do items have an upcoming alarm, and posts
notifications when the next one(s) are due.

@item @code{PasswordChangeService}
--- When you change your password for private records, it changes
their encryption key so all records need to be decrypted with the old
password and re-encrypted with the new one.  This service is
responsible for updating the stored data.  The changes occur in the
following sequence:

@enumerate
@item If there was an old password, all private records are decrypted.
@item The hash of the old password (if any) is removed from the database.
@item The hash of the new password (if any) is written to the database.
@item If there is a new password, all private records are encrypted.
@end enumerate

This ensures that if the process fails at any point, you will never
have data encrypted by two different keys.

@item @code{PalmImporterService}
--- This service is used when importing a @file{.dat} file, which the
app assumes was created by
@url{https://palmdb.net/app/palm-desktop,Palm Desktop} as a backup of
a To Do list from a @url{https://en.wikipedia.org/wiki/PalmPilot,Palm
Pilot} or @url{https://en.wikipedia.org/wiki/Palm_Tungsten,Palm
Tungsten} PDA.

@item @code{XMLExporterService}
--- This service is used when exporting your To Do list(s) to a backup
file.

@item @code{XMLImporterService}
--- This service is used when importing To Do items from an XML file.
(The app currently assumes any file not ending in @file{.dat} is XML
data.)

@end itemize

@node Receiver, Provider, Services, Code Organization
@section Receiver

In the @code{receiver} subpackage, the @code{AlarmInitReceiver} is
called when Android starts up so that it can start the
@code{AlarmService} which will let you know of any To Do items which
came due while the device was off.

@node Provider, Utilities, Receiver, Code Organization
@section Provider

In the @code{provider} subpackage, @code{ToDoProvider} provides access
to the SQLite database containing the To Do items and list of
categories.

@node Utilities, Unit Tests, Provider, Code Organization
@section Utilities

The following utility classes are in the @code{util} subpackage.

@itemize @bullet
@item @code{StringEncryption}
--- This class is used to encrypt and decrypt private records, and is
also the in-memory store for the password when it is entered on the
Settings screen (@emph{if} the password's hash matches the hash stored
in the database.)  The code takes care to ensure the plain-text
password is not cached, nor is it ever written to persistent storage.

@code{StringEncryption}
@item @code{FileUtils}
--- This class is used to determine the default location where backup
files will be written or read, and to check whether an SD card is
mounted and whether the app has permission to write to or read from
the requested folder.
@end itemize

@node Unit Tests, Android Tests, Utilities, Code Organization
@section Unit Tests

The unit tests are found in @file{app/src/test/java/} and is comprised of
tests that can run on a standard Java platform rather than the Android
platform.  In some cases, parts of the Android library (e.g. the
@code{android.util.Log} facility) have mock substitutes.

@node Android Tests, Building from the Source, Unit Tests, Code Organization
@section Android Tests

The tests in @file{app/src/androidTest/java/} @emph{require} an
Android platform to run on, typically an emulator.  These should be
repeated on emulators running different Android versions to check
compatibility.

@node Building from the Source, To Do, Code Organization, Top
@chapter Building from the Source

When making any changes to the code, you also need to change the
release date in the ``About@dots{}'' dialog
(@file{res/@/values/@/strings.xml}: @code{Info@/Popup@/Text}) as well
as the application's internal version number
(@file{Android@/Manafest@/.xml}: @code{android:@/versionCode} and
@code{android:@/versionName}).

@ifnottex
@menu
* Development Environment::
* Generating Icons::
* Testing::
* Generating the Application Package::
* Generating Documentation::
@end menu
@end ifnottex

@node Development Environment, Generating Icons, Building from the Source, Building from the Source
@section Development Environment

Building the application @file{.apk} was originally done up until 2014
using:
@itemize @bullet

@item A Java 1.6 compiler

@item Eclipse integrated development environment (IDE)

@item The Android software development kit (SDK) release 12.

@end itemize

To build the old code (version 1.2.x) on a newer system requires a few
different tools, but not @emph{too} modern.  The following development
environment was set up and tested in 2025 on Fedora Linux 40 with only
minor bug fixes to the code:

@itemize @bullet

@item Java (1.)8 @emph{(Do} @strong{not} @emph{use a newer version, as
Gradle 3.5 is not compatible with Java 11 or higher.)}

@item Android Studio 2.3.3, downloaded from the
@url{https://developer.android.com/studio/archive,archive}.

@item Gradle 3.5, installed by setting up the
Gradle Wrapper for the project and then modifying
@file{gradle/wrapper/gradle-wrapper.properties} to set
@code{distributionUrl} to
@url{https\://services.gradle.org/distributions/gradle-3.5-all.zip}.

@item The Android Gradle Plugin version 2.3.3, which had to be
downloaded along with most of its dependencies from a 3rd-party mirror
@url{https://repository.axelor.com/nexus/service/rest/repository/browse/maven-public/}
as it does not exist in Maven Central nor in Google's Maven repository.

@end itemize

The following development environment was also tested:
@itemize @bullet
@item Java (1.)8 @emph{(Do} @strong{not} @emph{use a newer version, as
Gradle 4.1 is not compatible with Java 11 or higher.)}

@item Android Studio 3.0, downloaded from the
@url{https://developer.android.com/studio/archive,archive}.

@item Gradle 4.1, installed by running
@code{./gradlew  wrapper --gradle-version=4.1}.

@item The Android Gradle Plugin version 3.0.0, available in Maven Central.

@end itemize

Building the more recent code (version 1.3+) @emph{should} work on the
latest release of Android Studio; the following environment was used
to build version 1.3.0:

@itemize @bullet
@item Java 21

@item Android Studio 2024.2.2 (``Ladybug'')

@item Gradle 8.12.1

@end itemize

See @uref{http://developer.android.com/sdk/index.html} for information
on how to set up a project using the Android SDK.

@node Generating Icons, Testing, Development Environment, Building from the Source
@section Generating Icons

Some of the application icons are generated from 3-D image description
files using @uref{http://www.povray.org/,Persistence of Vision}.  The
image files are included with the source code (in
@file{app/src/main/res/drawable*/}, but in case you want to tweak or
change any image you can use @command{povray} to generate new ones.
The @file{.pov} sources are under @file{app/src/main/graphics/}.

Because some of the raster icons contain small details that may get
lost if rendered at a low resolution, it is recommended that you
render the initial image at a size which is the least common multiple
of all icon sizes ---
@ifnothtml
@math{288 @times 288}
@end ifnothtml
@ifhtml
@html
288&#x00d7;288 
@end html
@end ifhtml
--- and then use a raster graphics program such as the
@uref{http://www.gimp.org/,GIMP},
@uref{http://www.imagemagick.org/,@command{convert}}, or
@uref{http://netpbm.sourceforge.net/,@command{pamscale}}.  For each
image file @file{foo.png}, you need to create several icons, aiming
for a size of about
@ifnothtml
@math{1 @over 5}
@end ifnothtml
@ifhtml
@html
&#x2155; 
@end html
@end ifhtml
inch on the screen: for example, a
@ifnothtml
@math{16 @times 16}
@end ifnothtml
@ifhtml
@html
16&#x00d7;16 
@end html
@end ifhtml
icon in
@file{res/drawable/foo_16.png}, a
@ifnothtml
@math{32 @times 32}
@end ifnothtml
@ifhtml
@html
32&#x00d7;32 
@end html
@end ifhtml
icon in
@file{res/drawable/foo_32.png}, a
@ifnothtml
@math{36 @times 36}
@end ifnothtml
@ifhtml
@html
36&#x00d7;36 
@end html
@end ifhtml
icon in
@file{res/drawable/foo_36.png}, a
@ifnothtml
@math{24 @times 24}
@end ifnothtml
@ifhtml
@html
24&#x00d7;24 
@end html
@end ifhtml
icon in
@file{res/drawable-ldpi/foo.png}, a
@ifnothtml
@math{32 @times 32}
@end ifnothtml
@ifhtml
@html
32&#x00d7;32 
@end html
@end ifhtml
icon in
@file{res/drawable-mdpi/foo.png}, a
@ifnothtml
@math{48 @times 48}
@end ifnothtml
@ifhtml
@html
48&#x00d7;48 
@end html
@end ifhtml
icon in
@file{res/drawable-hdpi/foo.png}, and a
@ifnothtml
@math{64 @times 64}
@end ifnothtml
@ifhtml
@html
64&#x00d7;64 
@end html
@end ifhtml
icon in
@file{res/drawable-xhdpi/foo.png}.

The command for generating an image from one of the @file{.pov}
descriptions is:

@example
povray +FN +AM3 +A0.3 +UA +W288 +H288 foo.pov
@end example

The main application icon was drawn by hand in the GIMP, and can be
found in @file{IconMaster.xcf}.  @emph{For Android Nougat and
earlier,} this raster image is scaled down from
@ifnothtml
@math{384 @times 384}
@end ifnothtml
@ifhtml
@html
384&#x00d7;384 
@end html
@end ifhtml
to about
@ifnothtml
@math{1 @over 2}
@end ifnothtml
@ifhtml
@html
&#x00bd; 
@end html
@end ifhtml
inch on screen: a
@ifnothtml
@math{60 @times 60}
@end ifnothtml
@ifhtml
@html
60&#x00d7;60 
@end html
@end ifhtml
icon in @file{res/drawable-ldpi/icon.png},
@ifnothtml
@math{80 @times 80}
@end ifnothtml
@ifhtml
@html
80&#x00d7;80 
@end html
@end ifhtml
in @file{res/drawable-mdpi/icon.png},
@ifnothtml
@math{120 @times 120}
@end ifnothtml
@ifhtml
@html
120&#x00d7;120 
@end html
@end ifhtml
in @file{res/drawable-hdpi/icon.png}, and
@ifnothtml
@math{160 @times 160}
@end ifnothtml
@ifhtml
@html
160&#x00d7;160 
@end html
@end ifhtml
in @file{res/drawable-xhdpi/icon.png}.

Android Oreo introduced ``adaptive icons'', so the usual icon ---
which has the natural rectangular shape of a piece of paper --- had to
be squeezed down to fit into a mask that can be anything from a
rounded squircle to a circle.  To generate the various sizes of this
icon, the canvas has to be enlarged to
@ifnothtml
@math{588 @times 588}
@end ifnothtml
and then scaled back down to
@ifnothtml
@math{80 @times 80}, @math{120 @times 120},
@math{160 @times 160}, and @math{240 @times 240}
@end ifnothtml
@ifhtml
@html
80&#x00d7;80, 120&#x00d7;120, 160&#x00d7;160, and 240&#x00d7;240 
@end html
@end ifhtml
for the various pixel densities in
@file{res/drawable-*dpi/icon_foreground.png}.  In addition, a
background image has to be provided in
@file{res/drawable-*dpi/icon_background.png}.

@cartouche Reproducibility Issues
Some publishing systems (e.g. F-Droid) require that compiled code and
generated / modified resources be kept exactly the same across any
build environment.  When writing PNG images, applications tend to use
the system's ``zlib'' compression library, which is ordinarily the one
provided from zlib.net.  Some systems may replace this library with an
alternative such as ``zlib-ng''; in order to get consistent output,
you may need to install ``zlib'' separately and have this library
loaded when running Android Studio, @samp{./gradlew}, and any other
application you use to create PNG images.  For example, the following
may be used from the command line:
@example
export LD_PRELOAD=/usr/local/lib/libz.so.1
@end example
@noindent
which will cause the application to use the zlib implementation in
@file{/usr/local/lib/} instead of the default implementation in
@file{/usr/lib/} or @file{/usr/lib64/}.
@end cartouche

@cartouche EXIF Prohibition
Some publishing platforms such as F-Droid forbid any EXIF metadata in
images.  The @url{https://exiftool.org/,@code{exiftool}} utility may
be used to strip this metadata from your images:
@example
exiftool -all= drawable*/*.png
@end example
The tool renames the original files to e.g. @file{abc.png_original}.
@end cartouche

@node Testing, Generating the Application Package, Generating Icons, Building from the Source
@section Testing

Currently, there are no automated tests for the source code; testing
must be done by running the application either on an emulator or real
Android device which has USB Debugging enabled.

@ifnottex
@menu
* Using Virtual Devices::
* Enabling USB Debugging::
* Debugging the Application::
@end menu
@end ifnottex

@node Using Virtual Devices, Enabling USB Debugging, Testing, Testing
@subsection Using Virtual Devices

If you want to test the application on different versions of Android
or different types of devices than you have physical devices for (or
don't want to use real devices for testing), you will need to
configure emulators using the Android Virtual Device Manager.

In Android Studio 2.3, go to @clicksequence{Tools @click{} Android
@click{} AVD Manager} to open the Android Virtual Device Manager.  In
Android Studio 2024, this is at @clicksequence{Tools @click{} Device
Manager}.  Click on ``Create Virtual Device'' (or the `+' icon) to add
a new emulator.  On the first page you will select the type and screen
size of the device, e.g. small phone or large tablet, along with its
pixel resolution.

On the next page choose which version of Android the emulator will
run.  The ABI determines what type of CPU the system will run on:
``arm'', ``arm64'', ``x86'', or ``x86_64''.  In order for the emulator
to run the ABI @strong{must} match (or be compatible with) your
computer's host CPU; for example, an ``arm'' image @emph{will not
run} on an ``x86_64'' computer.  (This means that you cannot test on
Android 2.2 (Froyo) or earlier in emulation, since there are no x86
builds for those versions of Andriod.)

The system image list shows both the Android version (e.g. 6.0), code
name (e.g. Marshmallow), and API level (e.g. 23).  You should create
at least enough emulators to cover the minimum and target SDK versions
specified in @file{AndroidManifest.xml}, and ideally the latest
release of Android and a few intermediate versions to make sure the
app is compatible across a wide range of device ages.  It is
@emph{highly recommended} to test against the following API's, since
the code has branches that follow different paths for each of these
versions:

@itemize @bullet
@item Ice Cream Sandwich (Android 4.0, API 14--15), which is the current minimum version
@item Jelly Bean (Android 4.1, API 16–18)
@item KitKat (Android 4.4, API 19–20) through Lollipop (Android 5.1, API 22)
@item Marshmallow (Android 6, API 23)
@item Nougat (Android 7, API 24--25)
@item Oreo (Android 8.1, API 27)
@item Pie (Android 9, API 28)
@item Quince Tart (Android 10, API 29) through Red Velvet Cake (Android 11, API 30)
@item Snow Cone (Android 12, API 31--32), which is the current target version
@end itemize

Testing the following API's is suggested to ensure compatibility with
new devices:

@itemize @bullet
@item Tiramisu (Android 13, API 33) through Upside-down Cake (Android 14, API 34)
@item Vanilla Ice Cream (Android 15, API 35) and up
@end itemize

On the last page finalize the details of the virtual device.  Give it
a descriptive name which will distinguish it from other virtual
devices; for example, include the type/size of the device and the
Android version and/or API level.  Under ``Advanced Settings'' you can
configure the system's CPU and memory usage.

To run the virtual device for testing, click on its play button in the
device list.  The emulated device should start up in a new window,
acting as if it were powered on.

@node Enabling USB Debugging, Debugging the Application, Using Virtual Devices, Testing
@subsection Enabling USB Debugging

@emph{You will need to do this whether you are using a virtual or real
device.}

First, if your device runs Android 4.2 (Jelly Bean) or higher you will
need to enable Developer Mode.  To do this, go to the system Settings
and under ``About phone'' look for the ``Build number''.  (This may be
nested under ``Software information''.)  Tap on the build number
@strong{seven times}; you should see the message ``You are now a
developer!''.

Next find the ``Developer options'' in the system settings and scroll
down to the ``USB debugging'' switch.  Turn that on whenever you need
to test the application, and plug the phone into your computer that is
running Android Studio.  For security you should always turn this
setting back off when you are finished testing.

@node Debugging the Application, Generating the Application Package, Enabling USB Debugging, Testing
@subsection Debugging the Application

In Android Studio (with the ToDo project open), ensure you have a
valid build.  If you will be testing on a virtual device be sure that
the emulator is running.  @xref{Using Virtual Devices} for how to
configure and run the virtual device.

Click the debug icon or go to @clicksequence{Run @click{} Debug
'app'}, then in the ``Select Deployment Target'' window select the
device under ``Connected Devices''.  If that section shows ``<none>''
then either the device is not running, not connected (by a USB cable
if it's a physical device), doesn't have USB debugging enabled, or may
have some other problem with it.  When you click ``OK'' then Studio
should install the current app build onto the device and launch it.

The ``Android Monitor'' panel may be used to view any log messages
from the application or the Android system.  Be sure the correct
device is selected.  When the application is started in debug mode,
Android will wait for Android Studio's debugger to connect before the
application will run so that it can catch any startup errors.  If the
application crashes, check then panel for an exception error message
which should show the point in the code where the error occurred.

@node Generating the Application Package, Generating Documentation, Testing, Building from the Source
@section Generating the Application Package (APK)

@cartouche Version Control
If you will be generating a signed APK for publishing, @emph{and} you
are using Gradle version 8.3 or higher, @strong{commit all of the
source code} prior to generating the APK.  The Android Gradle plugin
includes the commit hash in
@file{META-INF/version-control-info.textproto}.
@end cartouche

In Android Studio, click on the Build menu then ``Build APK''.  If
there were no errors, this should produce @file{app/app-release.apk}
(in Android Studio 2.3) or @file{app/release/app-release.apk} (in
Android Studio 2024).  You should rename this file to a more
descriptive name like @file{todo-1.3.0.apk}.

Alternatively from the command line, run the following commands:

@example
./gradlew assembleRelease
@end example
This will produce an @emph{unsigned} APK in
@file{app/build/@/outputs/apk/@/release/@/app-release-unsigned.apk}.
To sign this, you will need to locate the build tools for the version
specified in @file{app/build.gradle} under
@code{android.buildToolsVersion} (if present; otherwise the most
recent build tools supported by the Android Gradle plugin).  You will
also need to know where the keystore of your app signing key is
located.
@verbatim
${BUILD_TOOLS_VERSION_DIRECTORY}/apksigner sign \
  --alignment-preserved \
  --ks ${ANDROID_KEYSTORE} --ks-key-alias ${SIGNING_KEY_ALIAS} \
  --out app/${APP_NAME}-${VERSION}.apk \
  app/build/outputs/apk/release/app-release-unsigned.apk
@end verbatim

@emph{(The @code{--alignment-preserved} option is needed if you are
using build tools 35 or higher.  Omit it for earlier version of the
build tools.)}

@node Generating Documentation,  , Generating the Application Package, Building from the Source
@section Generating Documentation

Lastly, if you need to generate a new edition of this manual, you will
need @uref{http://www.gnu.org/software/texinfo/,@command{texinfo}} and
@uref{https://www.gnu.org/software/texinfo/manual/texinfo/html_node/Format-with-texi2dvi-or-texi2pdf.html,@command{texi2pdf}}
and/or @uref{http://www.nongnu.org/texi2html/,@command{texi2html}}.

To generate the manual in PDF, simply run:

@example
texi2pdf ToDo.texinfo
@end example

To generate the manual in HTML, run:

@example
texi2html --split node ToDo.texinfo
@end example
@noindent
which will produce the manual under @file{doc/ToDo/ToDo.html}.

@node To Do, , Building from the Source, Top
@chapter To Do

@itemize @bullet
@item Document how the code works

@item Document the data structures

@item Document the encryption algorithms

@end itemize

@bye
