\input texinfo   @c -*-texinfo-*-
@setfilename Building_ToDo.info
@settitle Building the To Do application for Android

@smallbook
@setchapternewpage on

@titlepage
@title{Building the To Do application}
@subtitle{for Android}
@author{by Trevin Beattie}

@page
Copyleft @copyright{} 2011–-2025 Trevin Beattie

To Do for Android is distributed under the terms of the Gnu Public
License, version 3.0.

@quotation [Encryption code]
Copyright © 2000-2013 The Legion of the Bouncy Castle
Inc. (@uref{http://www.bouncycastle.org})

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the
``Software''), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ``AS IS'', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
@end quotation

Some of the images used by the program are reproduced from work created
and shared by the Android Open Source Project and used according to the
terms described in the Creative Commons 2.5 Attribution License.

This manual and other images used by the program were created by Trevin
Beattie and are shared according to the terms described in the Creative
Commons 3.0 Attribution-ShareAlike License.
@end titlepage

@contents

@ifinfo
@node Top, Building from the Source, (dir), (dir)
@top Menu
@menu
* Building from the Source::
* To Do::
@end menu
@end ifinfo

@node Building from the Source, To Do, , Top
@chapter Building from the Source

When making any changes to the code, you also need to change the release
date in the ``About@dots{}'' dialog (@file{res/values/strings.xml} /
@code{InfoPopupText}) as well as the application's internal version
number (@file{AndroidManafest.xml} / @code{android:versionCode} and
@code{android:versionName}).

@c To do: move this chapter to a separate README or BUILDING file;
@c regular users don't need to know about it.

Building the application @file{.apk} was originally done up until 2014
using:
@itemize @bullet

@item A Java 1.6 compiler

@item Eclipse integrated development environment (IDE)

@item The Android software development kit (SDK) release 12.

@end itemize

To build the old code on a newer system requires a few different
tools, but not @emph{too} modern.  The following development
environment was set up and tested in 2025 on Fedora Linux 40 with only
minor bug fixes to the code:
@itemize @bullet

@item Java (1.)8 @emph{(Do} @strong{not} @emph{use a newer version, as
Gradle 3.5 is not compatible with Java 11 or higher.)}

@item Android Studio 2.3.3, downloaded from the
@url{https://developer.android.com/studio/archive,archive}.

@item Gradle 3.5, installed by setting up the
Gradle Wrapper for the project and then modifying
@file{gradle/wrapper/gradle-wrapper.properties} to set
@code{distributionUrl} to
@url{https\://services.gradle.org/distributions/gradle-3.5-all.zip}.

@item The Android Gradle Plugin version 2.3.3, which had to be
downloaded along with most of its dependencies from a 3rd-party mirror
@url{https://repository.axelor.com/nexus/service/rest/repository/browse/maven-public/}
as it does not exist in Maven Central nor in Google's Maven repository.

@end itemize

The following development environment was also tested:
@itemize @bullet
@item Java (1.)8 @emph{(Do} @strong{not} @emph{use a newer version, as
Gradle 4.1 is not compatible with Java 11 or higher.)}

@item Android Studio 3.0, downloaded from the
@url{https://developer.android.com/studio/archive,archive}.

@item Gradle 4.1, installed by running
@code{./gradlew  wrapper --gradle-version=4.1}.

@item The Android Gradle Plugin version 3.0.0, available in Maven Central.

@end itemize

See @uref{http://developer.android.com/sdk/index.html} for information
on how to set up a project using the Android SDK.

@node Generating Icons, Generating the Application Package, Building from the Source, Building from the Source
@section Generating Icons

Some of the application icons are generated from 3-D image description
files using @uref{http://www.povray.org/,Persistence of Vision}.  The
image files are included with the source code (in
@file{app/src/main/res/drawable*/}, but in case you want to tweak or
change any image you can use @command{povray} to generate new ones.
The @file{.pov} sources are under @file{app/src/main/graphics/}.

Because some of the icons contain small details that may get lost if
rendered at a low resolution, it is recommended that you render the
initial image at a size which is the least common multiple of all icon
sizes --- @math{288 @times 288} --- and then use a raster graphics
program such as the @uref{http://www.gimp.org/,GIMP},
@uref{http://www.imagemagick.org/,@command{convert}}, or
@uref{http://netpbm.sourceforge.net/,@command{pamscale}}.  For each
image file @file{foo.png}, you need to create five icons: a @math{16
@times 16} icon in @file{res/drawable/foo_16.png}, a @math{24 @times 24}
icon in @file{res/drawable-mdpi/foo.png}, a @math{32 @times 32} icon in
@file{res/drawable/foo_32.png}, a @math{36 @times 36} icon in
@file{res/drawable/foo_36.png}, and a @math{48 @times 48} icon in
@file{res/drawable-hdpi/foo.png}.

The command for generating an image from one of the @file{.pov}
descriptions is:

@example
povray +FN +AM3 +A0.3 +UA +W288 +H288 foo.pov
@end example

The main application icon was drawn by hand in the GIMP, and can be
found in @file{IconMaster.xcf}.  This is scaled down to @math{48 @times
48} for @file{res/drawable-mdpi/icon.png}, and to @math{72 @times 72}
for @file{res/drawable-hdpi/icon.png}.

@node Testing, Generating the Application Package, Generating Icons, Building from the Source
@section Testing

Currently, there are no automated tests for the source code; testing
must be done by running the application either on an emulator or real
Android device which has USB Debugging enabled.

@ifinfo
@menu
* Using Virtual Devices::
* Enabling USB Debugging::
* Debugging the Application::
@end menu
@end ifinfo

@node Using Virtual Devices, Enabling USB Debugging, Testing, Testing
@subsection Using Virtual Devices

If you want to test the application on different versions of Android
or different types of devices than you have physical devices for (or
don't want to use real devices for testing), you will need to
configure emulators using the Android Virtual Device Manager.

In Android Studio, go to @clicksequence{Tools @click{} Android
@click{} AVD Manager} to open the Android Virtual Device Manager.
Click on ``Create Virtual Device'' to add a new emulator.  On the
first page you will select the type and screen size of the device,
e.g. small phone or large tablet, along with its pixel resolution.

On the next page choose which version of Android the emulator will
run.  The ABI determines what type of CPU the system will run on:
``arm'', ``arm64'', ``x86'', or ``x86_64''.  In order for the emulator
to run the ABI @strong{must} match (or be compatible with) your
computer's host CPU; for example, an ``arm'' image @emph{will not
run} on an ``x86_64'' computer.  (This means that you cannot test on
Android 2.2 (Froyo) or earlier in emulation, since there are no x86
builds for those versions of Andriod.)

The system image list shows both the Android version (e.g. 6.0), code
name (e.g. Marshmallow), and API level (e.g. 23).  You should create
at least enough emulators to cover the minimum and target SDK versions
specified in @file{AndroidManifest.xml}, and ideally the latest
release of Android and a few intermediate versions to make sure the
app is compatible across a wide range of device ages.  It is
@emph{highly recommended} to test against the following API's, since
the code has branches that follow different paths for each of these
versions:

@itemize @bullet
@item Froyo (Android 2.2, API 8), which is the current minimum version
@item Gingerbread (Android 2.3, API 9--10)
@item Honeycomb (Android 3.0, API 11) through Jelly Bean (Android 4.3, API 18)
@item KitKat (Android 4.4, API 19) through Lollipop (Android 5.1, API 22)
@item Marshmallow (Android 6, API 23), which is the current target version
@end itemize

Testing the following API's is suggested to ensure compatibility with
new devices:

@itemize @bullet
@item Nougat (Android 7, API 24--25)
@item Oreo (Android 8, API 26) through Snow Cone (Android 12, API 32)
@item Tiramisu (Android 12, API 33)
@item Upside-down Case (Android 14, API 34) and up
@end itemize

On the last page finalize the details of the virtual device.  Give it
a descriptive name which will distinguish it from other virtual
devices; for example, include the type/size of the device and the
Android version and/or API level.  Under ``Advanced Settings'' you can
configure the system's CPU and memory usage.

To run the virtual device for testing, click on its play button in the
device list.  The emulated device should start up in a new window,
acting as if it were powered on.

@node Enabling USB Debugging, Debugging the Application, Using Virtual Devices, Testing
@subsection Enabling USB Debugging

@emph{You will need to do this whether you are using a virtual or real
device.}

First, if your device runs Android 4.2 (Jelly Bean) or higher you will
need to enable Developer Mode.  To do this, go to the system Settings
and under ``About phone'' look for the ``Build number''.  (This may be
nested under ``Software information''.)  Tap on the build number
@strong{seven times}; you should see the message ``You are now a
developer!''.

Next find the ``Developer options'' in the system settings and scroll
down to the ``USB debugging'' switch.  Turn that on whenever you need
to test the application, and plug the phone into your computer that is
running Android Studio.  For security you should always turn this
setting back off when you are finished testing.

@node Debugging the Application, Generating the Application Package, Enabling USB Debugging, Testing
@subsection Debugging the Application

In Android Studio (with the ToDo project open), ensure you have a
valid build.  If you will be testing on a virtual device be sure that
the emulator is running.  @xref{Using Virtual Devices} for how to
configure and run the virtual device.

Click the debug icon or go to @clicksequence{Run @click{} Debug
'app'}, then in the ``Select Deployment Target'' window select the
device under ``Connected Devices''.  If that section shows ``<none>''
then either the device is not running, not connected (by a USB cable
if it's a physical device), doesn't have USB debugging enabled, or may
have some other problem with it.  When you click ``OK'' then Studio
should install the current app build onto the device and launch it.

The ``Android Monitor'' panel may be used to view any log messages
from the application or the Android system.  Be sure the correct
device is selected.  When the application is started in debug mode,
Android will wait for Android Studio's debugger to connect before the
application will run so that it can catch any startup errors.  If the
application crashes, check then panel for an exception error message
which should show the point in the code where the error occurred.

@node Generating the Application Package, Generating Documentation, Testing, Building from the Source
@section Generating the Application Package (APK)

In Android Studio, click on the Build menu then ``Build APK''.  If
there were no errors, this should produce @file{app/app-release.apk}.
You should rename this file to a more descriptive name like
@file{todo-1.2.0.apk}.

@node Generating Documentation,  , Generating the Application Package, Building from the Source
@section Generating Documentation

Lastly, if you need to generate a new edition of this manual, you will
need @uref{http://www.gnu.org/software/texinfo/,@command{texinfo}} and
@uref{https://www.gnu.org/software/texinfo/manual/texinfo/html_node/Format-with-texi2dvi-or-texi2pdf.html,@command{texi2pdf}}.

To generate the manual in PDF, simply run:

@example
texi2pdf ToDo.texinfo
@end example

@node To Do, , Building from the Source, Top
@chapter To Do

@itemize @bullet
@item Document how the code works

@item Document the data structures

@item Document the encryption algorithms

@end itemize

@bye
